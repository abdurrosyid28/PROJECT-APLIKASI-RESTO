/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ASUS
 */
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class Pelanggan extends javax.swing.JFrame {

    /**
     * Creates new form Pelanggan
     */
    public Pelanggan() {
        initComponents();
    Harga.setEnabled(false); // Nonaktifkan kolom harga
    status_masakan.setEnabled(false); // Nonaktifkan kolom status

    tampilMenu();
    loadTransaksiData(); 
        tampilMenu();
        loadTransaksiData(); 
    }
    private void loadTransaksiData() {
    DefaultTableModel model = new DefaultTableModel(
        new String[]{"ID Transaksi", "Nama Pelanggan", "Nama Masakan", "Harga", "Jumlah", "Total Bayar"}, 0
    );

    try (Connection conn = KONEKSI.getConnection()) {
        String sql = "SELECT " +
                     "id_transaksi, " +
                     "nama_pelanggan, " +
                     "nama_masakan, " +
                     "harga, " +
                     "jumlah_beli, " +
                     "total_bayar " +
                     "FROM transaksi";
        
        PreparedStatement pst = conn.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("id_transaksi"),
                rs.getString("nama_pelanggan"),
                rs.getString("nama_masakan"),
                rs.getInt("harga"),
                rs.getInt("jumlah_beli"),
                rs.getInt("total_bayar")
            });
        }

        jTable1.setModel(model);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, 
            "Gagal menampilkan data: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}
    private void tampilMenu() {
    try (Connection conn = KONEKSI.getConnection()) {
        String sql = "SELECT nama_masakan FROM masakan";
        PreparedStatement pst = conn.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();
        while (rs.next()) {
            nama_masakan.addItem(rs.getString("nama_masakan"));
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Gagal load menu: " + e.getMessage());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Harga = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        nama_masakan = new javax.swing.JComboBox<>();
        status_masakan = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        id_pelanggan = new javax.swing.JTextField();
        jumlah_pesanan = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 51, 51));
        jLabel1.setFont(new java.awt.Font("Consolas", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PELANGGAN");

        jLabel2.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        jLabel2.setText("meja Pelanggan");

        jLabel3.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        jLabel3.setText("Nama Makanan");

        jLabel4.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        jLabel4.setText("Harga");

        Harga.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        jLabel5.setText("Status Makanan");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "id_pelanggan", "Nama masakan", "Harga", "Status masakan"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTable1InputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBackground(new java.awt.Color(102, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton7.setText("INPUT");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("UPDATE");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("DELETE");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        nama_masakan.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        nama_masakan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nama_masakanActionPerformed(evt);
            }
        });

        status_masakan.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N

        jButton11.setText("KEMBALI");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        id_pelanggan.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        id_pelanggan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                id_pelangganActionPerformed(evt);
            }
        });

        jumlah_pesanan.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        jLabel6.setText("Jumlah Pesanan");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 426, Short.MAX_VALUE)
                        .addComponent(jButton11)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12)
                        .addComponent(Harga, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nama_masakan, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(id_pelanggan, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(status_masakan, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jumlah_pesanan, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jButton11)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(id_pelanggan, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nama_masakan, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Harga, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(status_masakan, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jumlah_pesanan, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nama_masakanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nama_masakanActionPerformed
        // TODO add your handling code here:
        try (Connection conn = KONEKSI.getConnection()) {
        String namaMasakan = nama_masakan.getSelectedItem().toString();
        String sql = "SELECT * FROM masakan WHERE nama_masakan = ?";
        PreparedStatement pst = conn.prepareStatement(sql);
        pst.setString(1, namaMasakan);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            Harga.setText(String.valueOf(rs.getInt("harga")));    // Harga
            status_masakan.setText(rs.getString("status"));                // Status
            id_pelanggan.setText(String.valueOf(rs.getInt("id_masakan"))); // ID Masakan (untuk simpan transaksi)
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Gagal ambil data masakan: " + e.getMessage());
    }

    }//GEN-LAST:event_nama_masakanActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        String status = status_masakan.getText().trim();
if (status.equalsIgnoreCase("Habis")) {
    JOptionPane.showMessageDialog(this, 
        "Menu ini sudah habis, tidak bisa melakukan pemesanan.", 
        "Stok Habis", 
        JOptionPane.WARNING_MESSAGE);
    return;
}
     String namaPelanggan = id_pelanggan.getText().trim(); 
        String masakan = (String) nama_masakan.getSelectedItem();
        String jumlahText = jumlah_pesanan.getText().trim();

        // Validasi input
        if (jumlahText.isEmpty() || namaPelanggan.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Nama Pelanggan dan Jumlah Pesanan harus diisi!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validasi jumlah pesanan
        int jumlah;
        try {
            jumlah = Integer.parseInt(jumlahText);
            if (jumlah <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "Jumlah pesanan harus berupa angka dan lebih dari 0!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Proses database
        try (Connection conn = KONEKSI.getConnection()) {
            // Cari harga masakan
            String queryMasakan = "SELECT harga, id_masakan FROM masakan WHERE nama_masakan = ?";
            PreparedStatement pstMasakan = conn.prepareStatement(queryMasakan);
            pstMasakan.setString(1, masakan);
            ResultSet rsMasakan = pstMasakan.executeQuery();

            if (rsMasakan.next()) {
                int harga = rsMasakan.getInt("harga");
                int idMasakan = rsMasakan.getInt("id_masakan");
                int total = harga * jumlah;

                // Query insert transaksi
                String insertQuery = "INSERT INTO transaksi " +
                    "(nama_pelanggan, id_masakan, nama_masakan, harga, jumlah_beli, total_bayar) " +
                    "VALUES (?, ?, ?, ?, ?, ?)";
                
                PreparedStatement insertPst = conn.prepareStatement(insertQuery);
                insertPst.setString(1, namaPelanggan);
                insertPst.setInt(2, idMasakan);
                insertPst.setString(3, masakan);
                insertPst.setInt(4, harga);
                insertPst.setInt(5, jumlah);
                insertPst.setInt(6, total);
                
                // Eksekusi insert
                insertPst.executeUpdate();

                // Refresh tabel
                loadTransaksiData();

                // Reset field
                resetForm();

                JOptionPane.showMessageDialog(this, 
                    "Pesanan berhasil dimasukkan!", 
                    "Sukses", 
                    JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Makanan tidak ditemukan!", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Terjadi kesalahan: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTable1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTable1InputMethodTextChanged
        // TODO add your handling code here:
        DefaultTableModel model = new DefaultTableModel(new String[]{"ID Masakan", "Nama masakan", "Harga", "Jumlah Beli", "Total Bayar"}, 0);

    try (Connection conn = KONEKSI.getConnection()) {
        String sql = "SELECT t.id_masakan, t.nama_masakan, t.harga, t.jumlah_beli, t.total_bayar FROM transaksi t";
        PreparedStatement pst = conn.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("id_masakan"),
                rs.getString("nama_masakan"),
                rs.getInt("harga"),
                rs.getInt("jumlah_beli"),
                rs.getInt("total_bayar")
            });
        }

        jTable1.setModel(model);

        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Tidak ada pesanan untuk ID ini.", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal menampilkan data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jTable1InputMethodTextChanged

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) {
        // Ambil data dari baris yang dipilih
        String idTransaksi = jTable1.getValueAt(selectedRow, 0).toString();
        String namaPelanggan = jTable1.getValueAt(selectedRow, 1).toString();
        String namaMasakan = jTable1.getValueAt(selectedRow, 2).toString();
        String harga = jTable1.getValueAt(selectedRow, 3).toString();
        String jumlah = jTable1.getValueAt(selectedRow, 4).toString();

        // Set nilai ke field
        id_pelanggan.setText(namaPelanggan);
        nama_masakan.setSelectedItem(namaMasakan);
        Harga.setText(harga);
        jumlah_pesanan.setText(jumlah);
    }
    }//GEN-LAST:event_jTable1MouseClicked

    private void id_pelangganActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_id_pelangganActionPerformed
        // TODO add your handling code here:
     
    }//GEN-LAST:event_id_pelangganActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        String namaPelanggan = id_pelanggan.getText().trim(); 
        String masakan = (String) nama_masakan.getSelectedItem();
        String jumlahText = jumlah_pesanan.getText().trim();

        // Validasi input
        if (jumlahText.isEmpty() || namaPelanggan.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Nama Pelanggan dan Jumlah Pesanan harus diisi!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validasi jumlah pesanan
        int jumlah;
        try {
            jumlah = Integer.parseInt(jumlahText);
            if (jumlah <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "Jumlah pesanan harus berupa angka dan lebih dari 0!", 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Proses database
        try (Connection conn = KONEKSI.getConnection()) {
            // Cari harga masakan
            String queryMasakan = "SELECT harga, id_masakan FROM masakan WHERE nama_masakan = ?";
            PreparedStatement pstMasakan = conn.prepareStatement(queryMasakan);
            pstMasakan.setString(1, masakan);
            ResultSet rsMasakan = pstMasakan.executeQuery();

            if (rsMasakan.next()) {
                int harga = rsMasakan.getInt("harga");
                int idMasakan = rsMasakan.getInt("id_masakan");
                int total = harga * jumlah;

                // Query insert transaksi
                String insertQuery = "INSERT INTO transaksi " +
                    "(nama_pelanggan, id_masakan, nama_masakan, harga, jumlah_beli, total_bayar) " +
                    "VALUES (?, ?, ?, ?, ?, ?)";
                
                PreparedStatement insertPst = conn.prepareStatement(insertQuery);
                insertPst.setString(1, namaPelanggan);
                insertPst.setInt(2, idMasakan);
                insertPst.setString(3, masakan);
                insertPst.setInt(4, harga);
                insertPst.setInt(5, jumlah);
                insertPst.setInt(6, total);
                
                // Eksekusi insert
                insertPst.executeUpdate();

                // Refresh tabel
                loadTransaksiData();

                // Reset field
                resetForm();

                JOptionPane.showMessageDialog(this, 
                    "Pesanan berhasil dimasukkan!", 
                    "Sukses", 
                    JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Makanan tidak ditemukan!", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Terjadi kesalahan: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
    
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, 
            "Pilih baris yang ingin dihapus!", 
            "Peringatan", 
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Ambil ID Transaksi dari tabel
    String idTransaksi = jTable1.getValueAt(selectedRow, 0).toString();

    // Konfirmasi penghapusan
    int konfirmasi = JOptionPane.showConfirmDialog(this, 
        "Apakah Anda yakin ingin menghapus transaksi ini?", 
        "Konfirmasi Hapus", 
        JOptionPane.YES_NO_OPTION);

    if (konfirmasi == JOptionPane.YES_OPTION) {
        // Proses database
        try (Connection conn = KONEKSI.getConnection()) {
            // Query delete transaksi berdasarkan ID Transaksi
            String deleteQuery = "DELETE FROM transaksi WHERE id_transaksi = ?";
            
            PreparedStatement deletePst = conn.prepareStatement(deleteQuery);
            deletePst.setString(1, idTransaksi);
            
            // Eksekusi delete
            int rowsDeleted = deletePst.executeUpdate();

            if (rowsDeleted > 0) {
                // Refresh tabel
                loadTransaksiData();

                // Reset field
                resetForm();

                JOptionPane.showMessageDialog(this, 
                    "Pesanan berhasil dihapus!", 
                    "Sukses", 
                    JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Tidak ada pesanan yang dihapus!", 
                    "Peringatan", 
                    JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Terjadi kesalahan: " + e.getMessage(), 
                "Error", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        // Menutup form saat ini
        dispose();
        
        // Membuka kembali form login
        new LOGIN().setVisible(true);
    }//GEN-LAST:event_jButton11ActionPerformed
private void resetForm() {
        id_pelanggan.setText("");
        nama_masakan.setSelectedIndex(0);
        Harga.setText("");
        status_masakan.setText("");
        jumlah_pesanan.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pelanggan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pelanggan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pelanggan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pelanggan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pelanggan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Harga;
    private javax.swing.JTextField id_pelanggan;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jumlah_pesanan;
    private javax.swing.JComboBox<String> nama_masakan;
    private javax.swing.JTextField status_masakan;
    // End of variables declaration//GEN-END:variables

 }
